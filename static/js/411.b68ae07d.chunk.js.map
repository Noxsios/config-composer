{"version":3,"sources":["dragndrop/FilePickerYaml.jsx","dragndrop/FilePickerMD.jsx","dragndrop/CoverForm.jsx"],"names":["FilePickerYaml","useState","valid","setValid","useContext","MetaContext","meta","setMeta","onChange","files","a","length","readFileYaml","json","name","split","slice","match","toast","blob","textBlob","Blob","type","text","jsyaml","load","reason","style","minWidth","margin","id","initialPromptText","display","isInvalid","aria-label","closeOnClick","autoClose","toastStyle","toastStyles","closeButton","background","DarkTheme","euiCodeBlockBackgroundColor","FilePickerMD","readFileMD","md","markdown","CoverForm","className","Grid","container","direction","justify","alignItems","alignContent"],"mappings":"4OAyEeA,EA/DQ,WAAO,IAAD,EACDC,oBAAS,GADR,mBACpBC,EADoB,KACbC,EADa,OAEDC,qBAAWC,KAA7BC,EAFmB,EAEnBA,KAAMC,EAFa,EAEbA,QAGRC,EAAQ,uCAAG,WAAOC,GAAP,eAAAC,EAAA,2DACXD,EAAME,OAAS,GADJ,gCAEMC,EAAaH,EAAM,IAFzB,OAEPI,EAFO,OAOe,OAH1BJ,EAAM,GAAGK,KACNC,MAAM,KACNC,OAAO,GAAG,GACVC,MAAM,cATSC,YAAM,yCAYxBf,GAAS,GACTI,EAAQ,2BAAKD,GAAN,IAAYO,KAAM,iBAEzBV,GAAS,GACTI,EAAQ,2BAAKD,GAAN,IAAYO,KAAMA,MAdd,sBAiBbV,GAAS,GACTI,EAAQ,2BAAKD,GAAN,IAAYO,KAAM,eAlBZ,2CAAH,sDAsBRD,EAAY,uCAAG,WAAOO,GAAP,mBAAAT,EAAA,6DACfU,EAAW,IAAIC,KAAK,CAACF,GAAO,CAAEG,KAAM,SADrB,SAEFF,EAASG,OAFP,cAEfA,EAFe,gBAKbV,EAAOW,IAAOC,KAAKF,GALN,kBAMVV,GANU,uCAQjBK,YAAM,KAAMQ,QARK,kBASV,aATU,yDAAH,sDAalB,OACE,sBAAKC,MAAO,CAAEC,SAAU,IAAKC,OAAQ,QAArC,UACE,cAAC,IAAD,CACEC,GAAG,cACHC,kBAAkB,OAClBvB,SAAU,SAACC,GACTD,EAASC,IAEXuB,QAAQ,QACRC,WAAY/B,EACZgC,aAAW,qBAGb,cAAC,IAAD,CACEC,cAAY,EACZC,UAAW,IACXC,WAAYC,EACZC,aAAa,QAQfD,EAAc,CAClBE,WAAYC,EAAUC,6BCXTC,EAxDM,WAAO,IAAD,EACC1C,oBAAS,GADV,mBAClBC,EADkB,KACXC,EADW,OAECC,qBAAWC,KAA7BC,EAFiB,EAEjBA,KAAMC,EAFW,EAEXA,QAGRC,EAAQ,uCAAG,WAAOC,GAAP,eAAAC,EAAA,2DACXD,EAAME,OAAS,GADJ,gCAEIiC,EAAWnC,EAAM,IAFrB,OAEPoC,EAFO,OAOkB,OAH7BpC,EAAM,GAAGK,KACNC,MAAM,KACNC,OAAO,GAAG,GACVC,MAAM,iBATSC,YAAM,4CAYxBf,GAAS,GACTI,EAAQ,2BAAKD,GAAN,IAAYwC,SAAU,iBAE7B3C,GAAS,GACTI,EAAQ,2BAAKD,GAAN,IAAYwC,SAAUD,MAdlB,sBAiBb1C,GAAS,GACTI,EAAQ,2BAAKD,GAAN,IAAYwC,SAAU,eAlBhB,2CAAH,sDAsBRF,EAAU,uCAAG,WAAOzB,GAAP,iBAAAT,EAAA,6DACbU,EAAW,IAAIC,KAAK,CAACF,GAAO,CAAEG,KAAM,SADvB,SAEAF,EAASG,OAFT,cAEbA,EAFa,yBAGVA,GAHU,2CAAH,sDAMhB,OACE,sBAAKI,MAAO,CAAEC,SAAU,IAAKC,OAAQ,QAArC,UACE,cAAC,IAAD,CACEC,GAAG,YACHC,kBAAkB,WAClBvB,SAAU,SAACC,GACTD,EAASC,IAEXuB,QAAQ,QACRC,WAAY/B,EACZgC,aAAW,yBAGb,cAAC,IAAD,CACEC,cAAY,EACZC,UAAW,IACXC,WAAYC,EACZC,aAAa,QAQfD,EAAc,CAClBE,WAAYC,EAAUC,6B,SCvCTK,UAzBG,WAChB,OACE,qBAAKC,UAAU,WAAf,SACE,cAACC,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,SACVC,QAAQ,SACRC,WAAW,SACXC,aAAa,SALf,SAOE,eAACL,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,MACVC,QAAQ,SACRC,WAAW,SACXC,aAAa,SALf,UAOE,cAAC,EAAD,IACA,cAAC,EAAD","file":"static/js/411.b68ae07d.chunk.js","sourcesContent":["import { useContext, useState } from \"react\";\nimport {\n  EuiFilePicker,\n  // EuiText\n} from \"@elastic/eui\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport DarkTheme from \"@elastic/eui/dist/eui_theme_dark.json\";\nimport jsyaml from \"js-yaml\";\nimport MetaContext from \"../MetaContext\";\n\nconst FilePickerYaml = () => {\n  const [valid, setValid] = useState(true);\n  const { meta, setMeta } = useContext(MetaContext);\n  const wrongFile = () => toast(\"Only .yml or .yaml files are accepted\");\n\n  const onChange = async (files) => {\n    if (files.length > 0) {\n      const json = await readFileYaml(files[0]);\n      if (\n        files[0].name\n          .split(\".\")\n          .slice(-1)[0]\n          .match(/yaml|yml/g) === null\n      ) {\n        wrongFile();\n        setValid(false);\n        setMeta({ ...meta, json: \"undefined\" });\n      } else {\n        setValid(true);\n        setMeta({ ...meta, json: json });\n      }\n    } else {\n      setValid(false);\n      setMeta({ ...meta, json: \"undefined\" });\n    }\n  };\n\n  const readFileYaml = async (blob) => {\n    let textBlob = new Blob([blob], { type: \"text\" });\n    let text = await textBlob.text();\n\n    try {\n      let json = jsyaml.load(text);\n      return json;\n    } catch (error) {\n      toast(error.reason);\n      return \"undefined\";\n    }\n  };\n\n  return (\n    <div style={{ minWidth: 300, margin: \"1rem\" }}>\n      <EuiFilePicker\n        id=\"yaml-picker\"\n        initialPromptText=\"YAML\"\n        onChange={(files) => {\n          onChange(files);\n        }}\n        display=\"large\"\n        isInvalid={!valid}\n        aria-label=\"YAML File Picker\"\n      />\n      {/* <EuiText>{meta.json !== \"undefined\" && JSON.stringify(meta.json, null, 2)}</EuiText> */}\n      <ToastContainer\n        closeOnClick\n        autoClose={5000}\n        toastStyle={toastStyles}\n        closeButton={false}\n      />\n    </div>\n  );\n};\n\nexport default FilePickerYaml;\n\nconst toastStyles = {\n  background: DarkTheme.euiCodeBlockBackgroundColor,\n};\n","import { useContext, useState } from \"react\";\nimport {\n  EuiFilePicker,\n  // EuiText\n} from \"@elastic/eui\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport DarkTheme from \"@elastic/eui/dist/eui_theme_dark.json\";\nimport MetaContext from \"../MetaContext\";\n\nconst FilePickerMD = () => {\n  const [valid, setValid] = useState(true);\n  const { meta, setMeta } = useContext(MetaContext);\n  const wrongFile = () => toast(\"Only .md or .markdown files are accepted\");\n\n  const onChange = async (files) => {\n    if (files.length > 0) {\n      const md = await readFileMD(files[0]);\n      if (\n        files[0].name\n          .split(\".\")\n          .slice(-1)[0]\n          .match(/md|markdown/g) === null\n      ) {\n        wrongFile();\n        setValid(false);\n        setMeta({ ...meta, markdown: \"undefined\" });\n      } else {\n        setValid(true);\n        setMeta({ ...meta, markdown: md });\n      }\n    } else {\n      setValid(false);\n      setMeta({ ...meta, markdown: \"undefined\" });\n    }\n  };\n\n  const readFileMD = async (blob) => {\n    let textBlob = new Blob([blob], { type: \"text\" });\n    let text = await textBlob.text();\n    return text;\n  };\n\n  return (\n    <div style={{ minWidth: 300, margin: \"1rem\" }}>\n      <EuiFilePicker\n        id=\"md-picker\"\n        initialPromptText=\"Markdown\"\n        onChange={(files) => {\n          onChange(files);\n        }}\n        display=\"large\"\n        isInvalid={!valid}\n        aria-label=\"Markdown File Picker\"\n      />\n      {/* <EuiText>{meta.markdown !== \"undefined\" && JSON.stringify(meta.markdown, null, 2)}</EuiText> */}\n      <ToastContainer\n        closeOnClick\n        autoClose={5000}\n        toastStyle={toastStyles}\n        closeButton={false}\n      />\n    </div>\n  );\n};\n\nexport default FilePickerMD;\n\nconst toastStyles = {\n  background: DarkTheme.euiCodeBlockBackgroundColor,\n};\n","import FilePickerYaml from \"./FilePickerYaml\";\nimport FilePickerMD from \"./FilePickerMD\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst CoverForm = () => {\n  return (\n    <div className=\"no-print\">\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"center\"\n        alignContent=\"center\"\n      >\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"center\"\n          alignContent=\"center\"\n        >\n          <FilePickerYaml />\n          <FilePickerMD />\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default CoverForm;\n"],"sourceRoot":""}