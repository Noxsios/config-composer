{"version":3,"sources":["MetaContext.jsx","Footer.jsx","App.jsx","serviceWorkerRegistration.js","index.jsx","history/_DBConfig.js"],"names":["MetaContext","createContext","meta","setMeta","Footer","style","marginTop","padding","position","bottom","left","width","Grid","container","spacing","direction","justify","alignItems","alignContent","wrap","userSelect","Tutorial","lazy","RenderedMD","CoverForm","HistoryModal","Loading","LinearProgress","backgroundColor","DarkTheme","euiColorDisabledText","color","App","useState","json","markdown","value","Provider","Container","maxWidth","paddingBottom","size","textAlign","fallback","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","initDB","name","version","objectStoresMeta","store","storeSchema","keypath","options","unique","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.87016a01.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\nconst MetaContext = createContext({\r\n  meta: \"\",\r\n  setMeta: () => {},\r\n});\r\nexport default MetaContext;\r\n","import Grid from \"@material-ui/core/Grid\";\r\nconst Footer = () => {\r\n  return (\r\n    <div style={{ marginTop: \"1rem\", padding: \"1rem\", position: \"fixed\", bottom: 0, left: 0, width: \"100%\" }}>\r\n      <Grid container spacing={1} direction=\"row\" justify=\"center\" alignItems=\"center\" alignContent=\"center\" wrap=\"nowrap\">\r\n        <small style={{ userSelect: \"none\" }}>SrA Harry Randazzo - aka Razzle-Dazzle âœ¨</small>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import { useState, lazy, Suspense } from \"react\";\nimport { EuiTitle, EuiSpacer } from \"@elastic/eui\";\nimport { Container, Grid, LinearProgress } from \"@material-ui/core\";\nimport MetaContext from \"./MetaContext\";\nimport DarkTheme from \"@elastic/eui/dist/eui_theme_dark.json\";\nimport Footer from \"./Footer\";\nconst Tutorial = lazy(() => import(\"./Tutorial\"));\nconst RenderedMD = lazy(() => import(\"./viewer/RenderedMD\"));\nconst CoverForm = lazy(() => import(\"./dragndrop/CoverForm\"));\nconst HistoryModal = lazy(() => import(\"./history/HistoryModal\"));\n\nconst Loading = () => {\n  return (\n    <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" alignContent=\"center\">\n      <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" alignContent=\"center\">\n        <LinearProgress style={{ width: \"80%\", backgroundColor: DarkTheme.euiColorDisabledText }} color=\"secondary\" />\n      </Grid>\n    </Grid>\n  );\n};\n\nconst App = () => {\n  const [meta, setMeta] = useState({\n    json: \"undefined\",\n    markdown: \"undefined\",\n  });\n  const value = { meta, setMeta };\n  // console.log(meta);\n  return (\n    <MetaContext.Provider value={value}>\n      <Container maxWidth=\"md\" style={{ paddingBottom: \"3.5rem\" }}>\n        <EuiTitle size=\"l\">\n          <h1 style={{ textAlign: \"center\", padding: \"1rem\" }}>Config Composer</h1>\n        </EuiTitle>\n        <Suspense fallback={<div />}>\n          <Tutorial />\n        </Suspense>\n        <Suspense fallback={<div />}>\n          <HistoryModal />\n        </Suspense>\n        <EuiSpacer />\n        <Suspense fallback={<Loading />}>\n          <CoverForm />\n          <EuiSpacer />\n          {meta.json !== \"undefined\" && meta.markdown !== \"undefined\" && <RenderedMD />}\n        </Suspense>\n        <Footer />\n      </Container>\n    </MetaContext.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\"This web app is being served cache-first by a service worker. To learn more, visit https://cra.link/PWA\");\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\"New content is available and will be used when all tabs for this page are closed. See https://cra.link/PWA.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\"No internet connection found. App is running in offline mode.\");\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport \"@elastic/eui/dist/eui_theme_dark.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"./printStyle.css\";\nimport { initDB } from \"react-indexed-db\";\nimport { _DBConfig } from \"./history/_DBConfig\";\n\ninitDB(_DBConfig);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n","export const _DBConfig = {\r\n  name: \"history\",\r\n  version: 3,\r\n  objectStoresMeta: [\r\n    {\r\n      store: \"history\",\r\n      // storeConfig: { keyPath: \"id\", autoIncrement: true },\r\n      storeSchema: [\r\n        { name: \"json\", keypath: \"json\", options: { unique: false } },\r\n        { name: \"markdown\", keypath: \"markdown\", options: { unique: false } },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n"],"sourceRoot":""}