{"version":3,"sources":["MetaContext.jsx","Footer.jsx","App.jsx","serviceWorkerRegistration.js","index.jsx","history/_DBConfig.js"],"names":["MetaContext","createContext","meta","setMeta","Footer","style","marginTop","padding","position","bottom","left","width","Grid","container","spacing","direction","justify","alignItems","alignContent","wrap","userSelect","Tutorial","lazy","RenderedMD","CoverForm","HistoryModal","Loading","LinearProgress","backgroundColor","DarkTheme","euiColorDisabledText","color","App","useState","json","markdown","value","Provider","Container","maxWidth","paddingBottom","size","textAlign","fallback","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","initDB","name","version","objectStoresMeta","store","storeSchema","keypath","options","unique","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"2HAAA,WACMA,EAAcC,wBAAc,CAChCC,KAAM,GACNC,QAAS,eAEIH,O,wKCyBAI,EA7BA,WACb,OACE,qBACEC,MAAO,CACLC,UAAW,OACXC,QAAS,OACTC,SAAU,QACVC,OAAQ,EACRC,KAAM,EACNC,MAAO,QAPX,SAUE,cAACC,EAAA,EAAD,CACEC,WAAS,EACTC,QAAS,EACTC,UAAU,MACVC,QAAQ,SACRC,WAAW,SACXC,aAAa,SACbC,KAAK,SAPP,SASE,uBAAOd,MAAO,CAAEe,WAAY,QAA5B,gEChBFC,EAAWC,gBAAK,kBAAM,uEACtBC,EAAaD,gBAAK,kBAAM,yEACxBE,EAAYF,gBAAK,kBAAM,kEACvBG,EAAeH,gBAAK,kBAAM,uEAE1BI,EAAU,WACd,OACE,cAACd,EAAA,EAAD,CACEC,WAAS,EACTE,UAAU,MACVC,QAAQ,SACRC,WAAW,SACXC,aAAa,SALf,SAOE,cAACN,EAAA,EAAD,CACEC,WAAS,EACTE,UAAU,SACVC,QAAQ,SACRC,WAAW,SACXC,aAAa,SALf,SAOE,cAACS,EAAA,EAAD,CACEtB,MAAO,CACLM,MAAO,MACPiB,gBAAiBC,EAAUC,sBAE7BC,MAAM,mBA0CDC,EAnCH,WAAO,IAAD,EACQC,mBAAS,CAC/BC,KAAM,YACNC,SAAU,cAHI,mBACTjC,EADS,KAKVkC,EAAQ,CAAElC,OAAMC,QALN,MAOhB,OACE,cAACH,EAAA,EAAYqC,SAAb,CAAsBD,MAAOA,EAA7B,SACE,eAACE,EAAA,EAAD,CAAWC,SAAS,KAAKlC,MAAO,CAAEmC,cAAe,UAAjD,UACE,cAAC,IAAD,CAAUC,KAAK,IAAf,SACE,oBAAIpC,MAAO,CAAEqC,UAAW,SAAUnC,QAAS,QAA3C,+BAIF,cAAC,WAAD,CAAUoC,SAAU,wBAApB,SACE,cAACtB,EAAD,MAEF,cAAC,WAAD,CAAUsB,SAAU,wBAApB,SACE,cAAClB,EAAD,MAEF,cAAC,IAAD,IACA,eAAC,WAAD,CAAUkB,SAAU,cAAC,EAAD,IAApB,UACE,cAACnB,EAAD,IACA,cAAC,IAAD,IACe,cAAdtB,EAAKgC,MAA0C,cAAlBhC,EAAKiC,UACjC,cAACZ,EAAD,OAGJ,cAAC,EAAD,UCxDFqB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAqCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAIEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,M,8BCpFjEC,iBCVyB,CACvBC,KAAM,UACNC,QAAS,EACTC,iBAAkB,CAChB,CACEC,MAAO,UAEPC,YAAa,CACX,CAAEJ,KAAM,OAAQK,QAAS,OAAQC,QAAS,CAAEC,QAAQ,IACpD,CAAEP,KAAM,WAAYK,QAAS,WAAYC,QAAS,CAAEC,QAAQ,SDGpEC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDMnB,SAAkB/B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI+B,IAAIC,mBAAwBvC,OAAOC,SAASuC,MACpDC,SAAWzC,OAAOC,SAASwC,OAIvC,OAGFzC,OAAO0C,iBAAiB,QAAQ,WAC9B,IAAMrC,EAAK,UAAMkC,mBAAN,sBAEPzC,IA8DV,SAAiCO,EAAOC,GAEtCqC,MAAMtC,EAAO,CACXuC,QAAS,CAAE,iBAAkB,YAE5BlC,MAAK,SAACmC,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C1C,UAAUC,cAAc0C,MAAMxC,MAAK,SAACC,GAClCA,EAAawC,aAAazC,MAAK,WAC7BV,OAAOC,SAASmD,eAKpBhD,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEArFAkC,CAAwBhD,EAAOC,GAI/BC,UAAUC,cAAc0C,MAAMxC,MAAK,WACjCQ,QAAQC,IACN,+GAKJf,EAAgBC,EAAOC,OC3B/BgD,K","file":"static/js/main.87016a01.chunk.js","sourcesContent":["import { createContext } from \"react\";\nconst MetaContext = createContext({\n  meta: \"\",\n  setMeta: () => {},\n});\nexport default MetaContext;\n","import Grid from \"@material-ui/core/Grid\";\r\nconst Footer = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        marginTop: \"1rem\",\r\n        padding: \"1rem\",\r\n        position: \"fixed\",\r\n        bottom: 0,\r\n        left: 0,\r\n        width: \"100%\",\r\n      }}\r\n    >\r\n      <Grid\r\n        container\r\n        spacing={1}\r\n        direction=\"row\"\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n        alignContent=\"center\"\r\n        wrap=\"nowrap\"\r\n      >\r\n        <small style={{ userSelect: \"none\" }}>\r\n          SrA Harry Randazzo - aka Razzle-Dazzle âœ¨\r\n        </small>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import { useState, lazy, Suspense } from \"react\";\r\nimport { EuiTitle, EuiSpacer } from \"@elastic/eui\";\r\nimport { Container, Grid, LinearProgress } from \"@material-ui/core\";\r\nimport MetaContext from \"./MetaContext\";\r\nimport DarkTheme from \"@elastic/eui/dist/eui_theme_dark.json\";\r\nimport Footer from \"./Footer\";\r\nconst Tutorial = lazy(() => import(\"./Tutorial\"));\r\nconst RenderedMD = lazy(() => import(\"./viewer/RenderedMD\"));\r\nconst CoverForm = lazy(() => import(\"./dragndrop/CoverForm\"));\r\nconst HistoryModal = lazy(() => import(\"./history/HistoryModal\"));\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"row\"\r\n      justify=\"center\"\r\n      alignItems=\"center\"\r\n      alignContent=\"center\"\r\n    >\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n        alignContent=\"center\"\r\n      >\r\n        <LinearProgress\r\n          style={{\r\n            width: \"80%\",\r\n            backgroundColor: DarkTheme.euiColorDisabledText,\r\n          }}\r\n          color=\"secondary\"\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst App = () => {\r\n  const [meta, setMeta] = useState({\r\n    json: \"undefined\",\r\n    markdown: \"undefined\",\r\n  });\r\n  const value = { meta, setMeta };\r\n  // console.log(meta);\r\n  return (\r\n    <MetaContext.Provider value={value}>\r\n      <Container maxWidth=\"md\" style={{ paddingBottom: \"3.5rem\" }}>\r\n        <EuiTitle size=\"l\">\r\n          <h1 style={{ textAlign: \"center\", padding: \"1rem\" }}>\r\n            Config Composer\r\n          </h1>\r\n        </EuiTitle>\r\n        <Suspense fallback={<div />}>\r\n          <Tutorial />\r\n        </Suspense>\r\n        <Suspense fallback={<div />}>\r\n          <HistoryModal />\r\n        </Suspense>\r\n        <EuiSpacer />\r\n        <Suspense fallback={<Loading />}>\r\n          <CoverForm />\r\n          <EuiSpacer />\r\n          {meta.json !== \"undefined\" && meta.markdown !== \"undefined\" && (\r\n            <RenderedMD />\r\n          )}\r\n        </Suspense>\r\n        <Footer />\r\n      </Container>\r\n    </MetaContext.Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\r\nimport \"@elastic/eui/dist/eui_theme_dark.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./printStyle.css\";\r\nimport { initDB } from \"react-indexed-db\";\r\nimport { _DBConfig } from \"./history/_DBConfig\";\r\n\r\ninitDB(_DBConfig);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n","export const _DBConfig = {\n  name: \"history\",\n  version: 3,\n  objectStoresMeta: [\n    {\n      store: \"history\",\n      // storeConfig: { keyPath: \"id\", autoIncrement: true },\n      storeSchema: [\n        { name: \"json\", keypath: \"json\", options: { unique: false } },\n        { name: \"markdown\", keypath: \"markdown\", options: { unique: false } },\n      ],\n    },\n  ],\n};\n"],"sourceRoot":""}